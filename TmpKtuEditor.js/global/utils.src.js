;
Ktu.utils = {
    deepFreeze(obj) {
        const propNames = Object.getOwnPropertyNames(obj);
        propNames.forEach(name => {
            const prop = obj[name];
            if (typeof prop == 'object' && prop !== null) {
                this.deepFreeze(prop);
            }
        });
        return Object.freeze(obj);
    },
    simpleClone(o) {
        return null == o ? null : JSON.parse(JSON.stringify(o));
    },
    scrollTop(el, from, to, duration) {
        from = from || 0;
        duration = duration || 500;
        if (!window.requestAnimationFrame) {
            window.requestAnimationFrame = (
                window.webkitRequestAnimationFrame
                || window.mozRequestAnimationFrame
                || window.msRequestAnimationFrame
                || function (callback) {
                    return window.setTimeout(callback, 1000 / 60);
                }
            );
        }
        const difference = Math.abs(from - to);
        const step = Math.ceil(difference / duration * 50);

        function scroll(start, end, step) {
            if (start === end) return;

            let d = (start + step > end) ? end : start + step;
            if (start > end) {
                d = (start - step < end) ? end : start - step;
            }

            if (el === window) {
                window.scrollTo(d, d);
            } else {
                el.scrollTop = d;
            }
            window.requestAnimationFrame(() => scroll(d, end, step));
        }
        scroll(from, to, step);
    },
    firstUpper(s) {
        return s.toLowerCase().replace(/\b([\w|']+)\b/g, word => word.replace(word.charAt(0), word.charAt(0).toUpperCase()));
    },
    requestToJson(request) {
        request = decodeURIComponent(request);
        const obj = {};
        const paramArr = request.split('&');
        paramArr.forEach((item, index) => {
            let [key, value, ...other] = item.split('=');
            if (other.length > 0) {
                value += other.join('=');
            }
            obj[key] = value;
        });
        return obj;
    },
    checkWorkSize(newWorkObj) {
        // type 默认值100 代表自定义
        let {
            originalWidth,
            originalHeight,
            unitId = 1,
            bloodWidth = 0,
        } = newWorkObj;
        // 判断有没有值
        originalWidth = parseInt(originalWidth, 10) || 0;
        originalHeight = parseInt(originalHeight, 10) || 0;

        if (!originalWidth || !originalHeight) {
            Ktu.notice.warning('请输入宽高值');
            return;
        }
        if (unitId === undefined) {
            Ktu.notice.warning('请选择单位');
            return;
        }

        if (bloodWidth) {
            originalWidth += bloodWidth * 2;
            originalHeight += bloodWidth * 2;
        }

        /*
        const DPI = 96;
        let width = originalWidth;
        let height = originalHeight;
        */
        // 限制值
        if (unitId == 2) {
            if ((originalWidth > 2000 || originalHeight > 2000)) {
                Ktu.notice.warning('宽高不能超过2000毫米');
                return;
            } else if (originalWidth < 15 || originalHeight < 15) {
                Ktu.notice.warning('宽高不能低于15毫米');
                return;
            }
            /* width = parseInt((originalWidth * DPI) / 25.4, 10);
            height = parseInt((originalHeight * DPI) / 25.4, 10);
            */
        } else if (unitId == 3) {
            if ((originalWidth > 200 || originalHeight > 200)) {
                Ktu.notice.warning('宽高不能超过200厘米');
                return;
            } else if (originalWidth < 1.5 || originalHeight < 1.5) {
                Ktu.notice.warning('宽高不能低于1.5厘米');
                return;
            }
            /* width = parseInt((originalWidth * DPI) / 25.4 * 10, 10);
            height = parseInt((originalHeight * DPI) / 25.4 * 10, 10);
            */
        } else if (unitId == 4) {
            if (originalWidth > 79 || originalHeight > 79) {
                Ktu.notice.warning('宽高不能超过79英寸');
                return;
            } else if (originalWidth < 1 || originalHeight < 1) {
                Ktu.notice.warning('宽高不能低于1英寸');
                return;
            }
            /* width = parseInt((originalWidth * DPI), 10);
            height = parseInt((originalHeight * DPI), 10);
            */
        } else {
            if (originalWidth > Ktu.config.edit.maxWidth || originalHeight > Ktu.config.edit.maxHeight) {
                Ktu.notice.warning(`宽高不能超过${Ktu.config.edit.maxWidth}px`);
                return;
            } else if (originalWidth < 10 || originalHeight < 10) {
                Ktu.notice.warning('宽高不能低于10px');
                return;
            }
        }

        return true;
    },

    checkWorkSizeInEdit(newWorkObj) {
        // type 默认值100 代表自定义
        let {
            width,
            height,
            isLockWH,
            /* isH,
            ratio,*/
        } = newWorkObj;
        // 判断有没有值
        width = width || 0;
        height = height || 0;

        if (!width || !height) {
            return;
        }

        if (!isLockWH) {
            width = Math.min(width, Ktu.config.edit.maxWidth);
            width = Math.max(width, 10);
            height = Math.min(height, Ktu.config.edit.maxHeight);
            height = Math.max(height, 10);
        } else {
            width = Math.min(width, Ktu.config.edit.maxWidth);
            width = Math.max(width, 10);
            height = Math.min(height, Ktu.config.edit.maxHeight);
            height = Math.max(height, 10);
            /*  if (isH) {
                height = width / ratio;
            } else {
                width = height * ratio;
            }

            const maxRadius = Math.max(width, height);
            const minRadius = Math.min(width, height);

            if (maxRadius >= Ktu.config.edit.maxWidth) {
                console.log('a');
                if (maxRadius == width) {
                    width = Ktu.config.edit.maxWidth;
                    height = width / ratio;
                } else {
                    height = Ktu.config.edit.maxHeight;
                    width = height * ratio;
                }
            } else if (minRadius <= 10) {
                console.log('b');
                if (minRadius == width) {
                    width = 10;
                    height = width / ratio;
                } else {
                    height = 10;
                    width = height * ratio;
                }
            } */
        }

        /* width = parseInt(width);
           height = parseInt(height); */

        return {
            width,
            height,
        };
    },

    getOriginalSize(obj) {
        const {
            width,
            height,
            unit = 1,
        } = obj;

        const DPI = 96;
        let originalWidth = width;
        let originalHeight = height;
        // 限制值
        if (unit == 2) {
            originalWidth = parseInt((width / DPI) * 25.4, 10);
            originalHeight = parseInt((height / DPI) * 25.4, 10);
        } else if (unit == 3) {
            originalWidth = parseInt((width / DPI) * 25.4 / 10, 10);
            originalHeight = parseInt((height / DPI) * 25.4 / 10, 10);
        } else if (unit == 4) {
            originalWidth = parseInt((width / DPI), 10);
            originalHeight = parseInt((height / DPI), 10);
        }

        return {
            originalWidth,
            originalHeight,
        };
    },

    get160Image(src) {
        const arr = src.split('.');

        if (arr.length > 2) {
            arr[arr.length - 2] += '!160x160';
            const path = arr.join('.');
            return path;
        }
        return src;
    },
    get300Image(src) {
        const arr = src.split('.');

        if (arr.length > 2) {
            arr[arr.length - 2] += '!300x300';
            const path = arr.join('.');
            return path;
        }
        return src;
    },
    getSmartTmpImage(src, w, h) {
        let maxRadius = 160;
        if (Ktu.edit.getBigTmpImage) {
            const radia = w / h;
            if (radia > 1) {
                maxRadius *= radia;
            } else {
                maxRadius /= radia;
            }
        }

        if (maxRadius > 500) {
            maxRadius = 500;
        }

        const arr = src.split('.');

        if (arr.length > 2) {
            arr[arr.length - 2] += `!${maxRadius}x${maxRadius}`;
            const path = arr.join('.');
            return path;
        }
        return src;
    },

    /**
     * 将图片路径转化为base64
     */
    imagepathToBase64(path) {
        if (path.search(/^(data:)/) !== -1) {
            return new Promise().resolve();
        }

        const tmpImg = new Image();
        tmpImg.setAttribute('crossOrigin', 'Anonymous');

        const promise = new Promise((resolve, reject) => {
            tmpImg.onload = info => {
                // 准备空画布
                const canvas = document.createElement('canvas');
                const {
                    width,
                } = info.target;
                const {
                    height,
                } = info.target;

                canvas.width = width;
                canvas.height = height;
                // 取得画布的2d绘图上下文
                const context = canvas.getContext('2d');
                context.drawImage(tmpImg, 0, 0, width, height);

                const pngBase64 = canvas.toDataURL('image/png');

                resolve(pngBase64);
            };

            tmpImg.onerror = info => {
                console.error(info);
                console.error(path);
                reject();
            };
        });

        tmpImg.src = path;

        return promise;
    },

    getCrossOriginByBrowser() {
        return Ktu.isSafari() ? null : 'anonymous';
    },

    getTarget(node) {
        if (node === void 0) {
            node = document.body;
        }
        if (node === true) {
            return document.body;
        }
        return node instanceof window.Node ? node : document.querySelector(node);
    },

    pickColor(picker, selctedFun, resetFun) {
        if (!picker || !selctedFun || !resetFun) {
            return;
        }
        let oldZoom = Ktu.edit.scale;
        let selColor;

        $('#ktuCanvasHolder')[0].style.cursor = `url(${Ktu.initialData.resRoot}/image/editor/picker.png), default`;

        const canvas = document.createElement('canvas');
        canvas.width = Ktu.edit.editBox.width;
        canvas.height = Ktu.edit.editBox.height;
        canvas.className = 'pickColorCanvas';
        $('#ktuCanvasHolder').append(canvas);

        const ctx = canvas.getContext('2d');

        drawCanvas(true).then(() => {
            picker.addEventListener('click', clickEvent);
            $('#ktuCanvasHolder')[0].addEventListener('mousemove', changeColor);
            document.addEventListener('mousedown', mousedownEvent);
            document.addEventListener('keydown', keydownEvent);
        });

        function changeColor(event) {
            drawCanvas().then(() => {
                const colorData = ctx.getImageData(event.offsetX + 4, event.offsetY + 18, canvas.width, canvas.height).data;
                let rgb = '';
                let alpha = colorData[3];

                if (alpha == 255) {
                    rgb = `rgb(${colorData[0]},${colorData[1]},${colorData[2]})`;
                    selColor = Ktu.color.rgbToHex(rgb);
                } else {
                    alpha = (alpha / 255).toFixed(2);
                    rgb = `rgba(${colorData[0]},${colorData[1]},${colorData[2]},${alpha})`;
                    selColor = rgb;
                }

                selctedFun(selColor, false, rgb, alpha);
            });
        };

        function drawCanvas(isFirst) {
            const promise = new Promise((resolve, reject) => {
                const isReDraw = Ktu.edit.editBox.width !== canvas.width || Ktu.edit.editBox.height !== canvas.height || Ktu.edit.scale !== oldZoom;

                // 如果不是第一次画和重画直接return
                if (!isFirst && !isReDraw) {
                    resolve();
                    return;
                }

                if (isReDraw) {
                    ctx.clearRect(0, 0, canvas.width, canvas.height);
                    canvas.width = Ktu.edit.editBox.width;
                    canvas.height = Ktu.edit.editBox.height;
                    oldZoom = Ktu.edit.scale;
                }

                const fillColor = $('#editorMask .maskPath').css('fill');
                ctx.fillStyle = fillColor;
                ctx.fillRect(0, 0, canvas.width, canvas.height);
                const pageImage = new Image();

                pageImage.onload = function () {
                    ctx.drawImage(pageImage,
                        Ktu.edit.documentPosition.viewLeft,
                        Ktu.edit.documentPosition.viewTop,
                        Ktu.edit.documentSize.viewWidth,
                        Ktu.edit.documentSize.viewHeight);

                    resolve();
                };

                Ktu.edit.getPageTmpPath(0).then(base64 => {
                    pageImage.src = base64;
                });
            }).catch(() => {
                reject();
            });

            return promise;
        };

        function exitPickingColor() {
            Ktu.store.state.base.isPickingColor = false;
            $('#ktuCanvasHolder')[0].style.cursor = 'default';
            $('#ktuCanvasHolder')[0].removeEventListener('mousemove', changeColor);

            $('#ktuCanvasHolder').find(canvas)
                .remove();

            picker.removeEventListener('click', clickEvent);
            document.removeEventListener('mousedown', mousedownEvent);
            document.removeEventListener('keydown', keydownEvent);
        };

        function clickEvent() {
            exitPickingColor();
            resetFun();
        };

        function mousedownEvent(event) {
            exitPickingColor();
            if (event.target.tagName !== 'CANVAS') {
                resetFun();
            } else {
                selctedFun(selColor, true);
            }
        };

        function keydownEvent(event) {
            if (event.keyCode === 27) {
                exitPickingColor();
                resetFun();
            }
        };
    },

    is360Brower() {
        // firefox下navigator.mimeTypes[0]为undefined，避免报错，设为空字符串
        const minetype = navigator.mimeTypes[0] ? navigator.mimeTypes[0].type : '';

        if (minetype.indexOf('360') >= 0) {
            return true;
        }

        return false;
    },
    async saveLoop() {
        // 杰少说这里先注释掉
        /* if (location.search.includes('saveLoop')) {
            // 循环保存所有作品
            setTimeout(() => {
                location.reload();
            }, 15000);
            const saveList = [];
            try {
                const imageList = Ktu.templateData.map((object, index) => {
                    const imagePromise = Ktu.edit.getPageTmpPath(0, index);
                    imagePromise.then(dataUrl => {
                        Ktu.ktuData.tmpContents[index].tmpFilePath = dataUrl;
                        Ktu.ktuData.tmpContents[index].content[0].svgData = Ktu.template.toSvg(false, index);
                        const savePromise = Ktu.save.savePage(false, index);
                        saveList.push(savePromise);
                    });
                    return imagePromise;
                });
                await Promise.all(imageList);
                await Promise.all(saveList);

                // const idList  = [ 101, 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 , 120 , 121 , 122 , 123 , 124 , 125 , 126 , 127 , 128 , 129 , 130 , 131 , 132 , 133 , 134 , 135 , 136 , 137 , 138 , 139 , 140 , 141 , 142 , 143 , 144 , 145 , 150 , 152 , 153 , 155 , 156 , 157 , 158 , 159 , 163 , 164 , 165 , 166 , 167 , 168 , 169 , 170 , 173 , 174 , 175 , 176 , 177 , 178 , 180 , 181 , 182 , 183 , 184 , 185 , 186 , 187 , 188 , 189 , 190 , 191 , 192 , 193 , 194 , 195 , 196 , 197 , 198 , 204 , 206 , 207 , 209 , 224 , 225 , 226 , 227 , 228 , 230 , 231 , 238 , 240 , 241 , 242 , 243 , 244 , 245 , 246 , 247 , 248 , 249 , 250 , 251 , 252 , 253 , 254 , 255 , 256 , 257 , 258 , 260 , 261 , 264 , 265 , 266];
                const idObj = {
                    // 三方设计师
                    17176129: [101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 351, 354, 356, 357, 358, 360, 361, 364, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 378, 379, 380, 382, 383, 384, 385, 386, 387, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 546, 553, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1114, 1115, 1116, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1164, 1165, 1166, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1300, 1301, 1302, 1303, 1304, 1305, 1306, 1307, 1308, 1309, 1310, 1311, 1312, 1313, 1314, 1315, 1316, 1317, 1318, 1319, 1320, 1321, 1322, 1323, 1324, 1325, 1326, 1327, 1328, 1329, 1330, 1331, 1332, 1333, 1334, 1335, 1336, 1337, 1338, 1339, 1340, 1341, 1342, 1343, 1344, 1345, 1346, 1347, 1348, 1349, 1350, 1351, 1352, 1353, 1354, 1355, 1356, 1357, 1358, 1359, 1360, 1361, 1362, 1363, 1364, 1365, 1366, 1367, 1368, 1369, 1370, 1371, 1372, 1373, 1374, 1375, 1376, 1377, 1378, 1379, 1380, 1381, 1382, 1383, 1384, 1385, 1386, 1387, 1388, 1389, 1390, 1391, 1392, 1393, 1394, 1395, 1396, 1398, 1399, 1400, 1401, 1402, 1403, 1404, 1405, 1406, 1407, 1408, 1409, 1410, 1411, 1412, 1413, 1414, 1415, 1416, 1417, 1418, 1419, 1420, 1421, 1422, 1423, 1424, 1425, 1426, 1427, 1428, 1429, 1430, 1431, 1432, 1433, 1434, 1435, 1436, 1437, 1438, 1439, 1440, 1441, 1442, 1443, 1444, 1445, 1446, 1447, 1448, 1449, 1450, 1451, 1452, 1453, 1454, 1455, 1456, 1457, 1458, 1459, 1460, 1461, 1462, 1463, 1464, 1465, 1466, 1467, 1468, 1469, 1470, 1471, 1472, 1473, 1474, 1475, 1476, 1477, 1478, 1479, 1480, 1481, 1482, 1483, 1484, 1485, 1486, 1487, 1488, 1489, 1490, 1491, 1492, 1493, 1494, 1495, 1496, 1497, 1498, 1499, 1500, 1501, 1502, 1503, 1504, 1505, 1506, 1507, 1508, 1509, 1510, 1511, 1512, 1513, 1514, 1515, 1516, 1517, 1518, 1519, 1520, 1521, 1522, 1523, 1524, 1525, 1526, 1527, 1528, 1529, 1530, 1531, 1532, 1533, 1534, 1535, 1536, 1537, 1538, 1539, 1540, 1541, 1542, 1543, 1544, 1545, 1546, 1547, 1548, 1549, 1550, 1551, 1552, 1553, 1554, 1555, 1556, 1557, 1558, 1559, 1560, 1561, 1562, 1563, 1564, 1565, 1566, 1567, 1568, 1569, 1570, 1571, 1572, 1573, 1574, 1575, 1576, 1577, 1578, 1579, 1580, 1581, 1582, 1583, 1584, 1585, 1586, 1587, 1588, 1589, 1590, 1591, 1592, 1593, 1594, 1595, 1596, 1597, 1598, 1599, 1600, 1601, 1602, 1603, 1604, 1605, 1606, 1607, 1608, 1609, 1610, 1611, 1612, 1613, 1614, 1615, 1616, 1617, 1618, 1619, 1620, 1621, 1622, 1623, 1624, 1625, 1626, 1627, 1628, 1629, 1630, 1631, 1632, 1633, 1634, 1635, 1636, 1637, 1638, 1641, 1642, 1643, 1644, 1645, 1646, 1647, 1648, 1649, 1650, 1651, 1652, 1653, 1654, 1655, 1656, 1657, 1658, 1659, 1660, 1661, 1662, 1663, 1664, 1665, 1666, 1667, 1668, 1669, 1670, 1671, 1672, 1673, 1674, 1675, 1676, 1677, 1678, 1679, 1680, 1681, 1682, 1683, 1684, 1685, 1686, 1687, 1688, 1689, 1690, 1691, 1692, 1693, 1694, 1695, 1696, 1697, 1698, 1699, 1700, 1701, 1702, 1703, 1704, 1705, 1706, 1707, 1708, 1709, 1710, 1711, 1712, 1713, 1714, 1715, 1716, 1717, 1718, 1719, 1720, 1721, 1722, 1723, 1724, 1725, 1726, 1727, 1728, 1729, 1730, 1731, 1732, 1733, 1734, 1735, 1736, 1737, 1738, 1739, 1740, 1741, 1742, 1743, 1744, 1745, 1746, 1747, 1748, 1749, 1750, 1751, 1752, 1753, 1754, 1755, 1756, 1757, 1758, 1759, 1760, 1761, 1762, 1763, 1764, 1765, 1766, 1767, 1768, 1769, 1770, 1771, 1773, 1774, 1775, 1776, 1777, 1778, 1779, 1780, 1781, 1782, 1783, 1784, 1785, 1786, 1787, 1788, 1789, 1790, 1791, 1792, 1793, 1794, 1795, 1796, 1797, 1798, 1799, 1800, 1801, 1802, 1803, 1804, 1805, 1806, 1807, 1808, 1809, 1810, 1811, 1812, 1813, 1814, 1815, 1816, 1817, 1818, 1819, 1820, 1821, 1822, 1823, 1824, 1825, 1827, 1828, 1829, 1830, 1831, 1832, 1833, 1834, 1835, 1836, 1837, 1838, 1839, 1840, 1841, 1842, 1843, 1844, 1845, 1846, 1847, 1848, 1849, 1850, 1851, 1852, 1853, 1854, 1855, 1856, 1857, 1858, 1859, 1860, 1861, 1862, 1863, 1864, 1865, 1866, 1867, 1868, 1869, 1870, 1871, 1872, 1873, 1874, 1875, 1876, 1877, 1878, 1879, 1880, 1881, 1882, 1883, 1884, 1885, 1886, 1887, 1888, 1889, 1890, 1891, 1892, 1893, 1894, 1895, 1896, 1897, 1898, 1899, 1900, 1901, 1902, 1903, 1904, 1905, 1906, 1907, 1908, 1909, 1910, 1911, 1912, 1913, 1914, 1915, 1916, 1917, 1918, 1919, 1920, 1921, 1922, 1923, 1924, 1925, 1926, 1927, 1928, 1929, 1930, 1931, 1932, 1933, 1934, 1935, 1936, 1937, 1938, 1939, 1940, 1941, 1942, 1943, 1944, 1945, 1946, 1947, 1948, 1949, 1950, 1951, 1953, 1954, 1955, 1956, 1957, 1958, 1959, 1960, 1961, 1962, 1963, 1964, 1965, 1966, 1967, 1968, 1969, 1970, 1971, 1972, 1973, 1974, 1975, 1976, 1977, 1978, 1979, 1980, 1981, 1982, 1983, 1984, 1985, 1986, 1987, 1988, 1989, 1990, 1991, 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011, 2012, 2013, 2014, 2015, 2016, 2017, 2018, 2019, 2020, 2021, 2022, 2023, 2024, 2025, 2026, 2027, 2028, 2029, 2030, 2031, 2032, 2033, 2034, 2035, 2036, 2037, 2038, 2039, 2040, 2041, 2042, 2043, 2044, 2045, 2046, 2047, 2048, 2049, 2050, 2051, 2052, 2053, 2054, 2055, 2056, 2057, 2058, 2059, 2060, 2061, 2062, 2063, 2064, 2065, 2066, 2067, 2068, 2069, 2070, 2071, 2072, 2073, 2074, 2075, 2076, 2077, 2078, 2079, 2080, 2081, 2082, 2083, 2084, 2085, 2086, 2087, 2088, 2089, 2090, 2091, 2092, 2093, 2094, 2095, 2096, 2097, 2098, 2099, 2100, 2101, 2102, 2103, 2104, 2105, 2106, 2107, 2108, 2109, 2110, 2111, 2112, 2113, 2114, 2115, 2117, 2118, 2119, 2120, 2121, 2122, 2123, 2124, 2125, 2126, 2127, 2128, 2129, 2130, 2131, 2132, 2133, 2134, 2135, 2136, 2137, 2138, 2139, 2140, 2141, 2142, 2143, 2144, 2145, 2146, 2147, 2148, 2149, 2150, 2151, 2152, 2153, 2154, 2155, 2156, 2157, 2158, 2159, 2160, 2161, 2162, 2163, 2164, 2165, 2166, 2167, 2168, 2169, 2170, 2171, 2172, 2173, 2174, 2175, 2176, 2177, 2178, 2179, 2180, 2181, 2182, 2183, 2184, 2185, 2186, 2187, 2188, 2189, 2190, 2191, 2192, 2193, 2194, 2195, 2196, 2197, 2198, 2199, 2200, 2201, 2202, 2203, 2204, 2205, 2206, 2207, 2208, 2209, 2210, 2211, 2212, 2213, 2214, 2215, 2216, 2217, 2218, 2219, 2220, 2221, 2222, 2223, 2224, 2225, 2226, 2227, 2228, 2229, 2230, 2231, 2232, 2233, 2234, 2235, 2236, 2237, 2238, 2239, 2240, 2241, 2242, 2243, 2244, 2245, 2246, 2247, 2248, 2249, 2250, 2255, 2256, 2257, 2258, 2259, 2260, 2261, 2262, 2263, 2264, 2265, 2266, 2267, 2268, 2269, 2270, 2271, 2272, 2273, 2274, 2275, 2276, 2277, 2278, 2279, 2280, 2281, 2282, 2283, 2284, 2285, 2286, 2287, 2288, 2289, 2290, 2291, 2292, 2293, 2294, 2295, 2296, 2297, 2298, 2299, 2300, 2301, 2302, 2303, 2304, 2305, 2308, 2309, 2310, 2311, 2312, 2313, 2314, 2315, 2316, 2317, 2318, 2319, 2320, 2321, 2322, 2323, 2324, 2325, 2326, 2327, 2328, 2329, 2330, 2331, 2332, 2333, 2334, 2335, 2336, 2337, 2338, 2339, 2340, 2341, 2342, 2343, 2344, 2345, 2346, 2347, 2348, 2349, 2350, 2351, 2352, 2353, 2354, 2355, 2356, 2357, 2358, 2359, 2360, 2361, 2362, 2363, 2364, 2365, 2366, 2367, 2368, 2369, 2370, 2371, 2372, 2373, 2374, 2375, 2376, 2377, 2378, 2379, 2380, 2381, 2382, 2383, 2384, 2385, 2386, 2387, 2388, 2389, 2390, 2391, 2392, 2393, 2394, 2395, 2396, 2397, 2398, 2399, 2400, 2401, 2402, 2403, 2404, 2405, 2406, 2407, 2408, 2409, 2410, 2411, 2412, 2413, 2414, 2415, 2416, 2417, 2418, 2419, 2420, 2421, 2422, 2423, 2424, 2425, 2426, 2427, 2428, 2429, 2430, 2431, 2432, 2433, 2434, 2435, 2436, 2437, 2438, 2439, 2440, 2441, 2442, 2443, 2444, 2445, 2446, 2447, 2448, 2449, 2450, 2451, 2452, 2453, 2454, 2455, 2456, 2457, 2458, 2459, 2460, 2461, 2462, 2463, 2464, 2465, 2466, 2467, 2468, 2469, 2470, 2471, 2472, 2473, 2474, 2475, 2476, 2477, 2478, 2479, 2480, 2481, 2482, 2483, 2484, 2485, 2486, 2487, 2488, 2489, 2490, 2491, 2492, 2493, 2494, 2495, 2496, 2497, 2498, 2499, 2500, 2501, 2502, 2503, 2504, 2505, 2506, 2507, 2508, 2509, 2510, 2511, 2512, 2513, 2514, 2515, 2516, 2517, 2518, 2519, 2520, 2521, 2522, 2523, 2524, 2525, 2526, 2527, 2528, 2529, 2530, 2531, 2532, 2533, 2534, 2535, 2536, 2537, 2538, 2539, 2540, 2541, 2542, 2544, 2545, 2546, 2548, 2549, 2550, 2552, 2553, 2555, 2556, 2557, 2558, 2559, 2560, 2561, 2563, 2564, 2565, 2566, 2567, 2568, 2569, 2570, 2571, 2572, 2573, 2574, 2575, 2577, 2578, 2579, 2580, 2581, 2582, 2583, 2584, 2585, 2586, 2587, 2588, 2589, 2590, 2591, 2592, 2593, 2594, 2595, 2596, 2597, 2598, 2599, 2600, 2601, 2602, 2603, 2604, 2605, 2606, 2607, 2608, 2609, 2610, 2611, 2612, 2613, 2614, 2615, 2616, 2617, 2618, 2619, 2620, 2621, 2622, 2623, 2624, 2625, 2626, 2627, 2628, 2629, 2630, 2631, 2632, 2633, 2634, 2635, 2636, 2637, 2638, 2639, 2640, 2641, 2642, 2643, 2644, 2645, 2646, 2647, 2648, 2649, 2650, 2651, 2652, 2653, 2654, 2655, 2656, 2657, 2658, 2659, 2660, 2661, 2662, 2663, 2664, 2665, 2666, 2667, 2668, 2669, 2670, 2671, 2672, 2673, 2674, 2675, 2676, 2677, 2678, 2679, 2680, 2681, 2682, 2683, 2684, 2685, 2686, 2687, 2688, 2689, 2690, 2691, 2692, 2693, 2694, 2695, 2696, 2697, 2698, 2699, 2700, 2701, 2702, 2703, 2704, 2705, 2707, 2708, 2709, 2710, 2711, 2712, 2713, 2714, 2715, 2716, 2717, 2718, 2719, 2720, 2721, 2722, 2723, 2724, 2725, 2726, 2727, 2728, 2729, 2730, 2731, 2732, 2733, 2734, 2735, 2736, 2737, 2738, 2739, 2741, 2742, 2743, 2744, 2745, 2746, 2747, 2748, 2749, 2750, 2751, 2752, 2753, 2754, 2755, 2756, 2757, 2758, 2759, 2760, 2761, 2762, 2763, 2764, 2765, 2766, 2767, 2768, 2769, 2770, 2771, 2772, 2773, 2774, 2780, 2781, 2782, 2783, 2784, 2785, 2786, 2787, 2788, 2789, 2790, 2791, 2792, 2793, 2794, 2795, 2796, 2797, 2798, 2799, 2800, 2801, 2802, 2803, 2804, 2805, 2806, 2807, 2808, 2809, 2810, 2811, 2812, 2814, 2815, 2816, 2817, 2818, 2819, 2820, 2821, 2822, 2823, 2824, 2825, 2826, 2828, 2829, 2830, 2831, 2832, 2833, 2834, 2835, 2836, 2837, 2838, 2839, 2840, 2841, 2842, 2843, 2844, 2845, 2846, 2847, 2848, 2849, 2850, 2851, 2852, 2853, 2854, 2855, 2856, 2857, 2858, 2859, 2860, 2861, 2862, 2863, 2864, 2865, 2866, 2867, 2868, 2869, 2870, 2871, 2872, 2873, 2874, 2875, 2876, 2877, 2878, 2879, 2880, 2881, 2882, 2883, 2884, 2885, 2886, 2887, 2888, 2889, 2890, 2891, 2892, 2893, 2894, 2895, 2896, 2897, 2898, 2899, 2900, 2901, 2902, 2903, 2904, 2905, 2906, 2907, 2908, 2909, 2910, 2911, 2912, 2913, 2914, 2915, 2916, 2917, 2918, 2919, 2920, 2921, 2922, 2923, 2924, 2925, 2926, 2927, 2928, 2929, 2930, 2931, 2932, 2933, 2934, 2935, 2936, 2937, 2938, 2939, 2940, 2941, 2942, 2943, 2944, 2945, 2946, 2947, 2948, 2949, 2950, 2951, 2952, 2953, 2954, 2955, 2956, 2957, 2958, 2959, 2960, 2961, 2962, 2963, 2964, 2965, 2966, 2967, 2968, 2969, 2970, 2971, 2972, 2973, 2974, 2975, 2976, 2977, 2978, 2979, 2980, 2981, 2982, 2983, 2984, 2985, 2986, 2987, 2988, 2989, 2990, 2991, 2992, 2993, 2994, 2995, 2996, 2997, 2998, 2999, 3000, 3001, 3002, 3003, 3004, 3005, 3006, 3007, 3008, 3009, 3010, 3011, 3012, 3013, 3014, 3016, 3017, 3018, 3019, 3020, 3021, 3022, 3023, 3024, 3025, 3026, 3027, 3028, 3029, 3030, 3031, 3032, 3033, 3034, 3035, 3036, 3037, 3038, 3039, 3040, 3041, 3042, 3043, 3044, 3045, 3046, 3047, 3048, 3049, 3050, 3051, 3052, 3053, 3054, 3055, 3056, 3057, 3058, 3059, 3060, 3061, 3062, 3063, 3064, 3065, 3066, 3067, 3068, 3069, 3070, 3071, 3072, 3073, 3074, 3075, 3076, 3077, 3078, 3079, 3080, 3081, 3082, 3083, 3084, 3085, 3086, 3087, 3088, 3089, 3090, 3091, 3092, 3093, 3094, 3095, 3096, 3097, 3098, 3099, 3100, 3101, 3102, 3103, 3104, 3105, 3106, 3107, 3108, 3109, 3110, 3111, 3112, 3113, 3114, 3115, 3116, 3117, 3118, 3119, 3120, 3121, 3122, 3123, 3124, 3125, 3126, 3127, 3128, 3129, 3130, 3131, 3132, 3133, 3134, 3135, 3136, 3137, 3138, 3139, 3140, 3141, 3142, 3143, 3144, 3145, 3146, 3147, 3148, 3149, 3150, 3151, 3152, 3153, 3154, 3155, 3156, 3157, 3158, 3159, 3160, 3161, 3162, 3163, 3164, 3165, 3166, 3167, 3168, 3169, 3170, 3171, 3172, 3173, 3174, 3175, 3176, 3177, 3178, 3179, 3180, 3181, 3182, 3183, 3184, 3185, 3186, 3187, 3188, 3189, 3190, 3191, 3192, 3193, 3194, 3195, 3196, 3197, 3198, 3199, 3200, 3201, 3202, 3203, 3204, 3205, 3206, 3207, 3208, 3209, 3210, 3211, 3212, 3213, 3214, 3215, 3216, 3217, 3218, 3219, 3220, 3221, 3222, 3223, 3224, 3225, 3226, 3227, 3228, 3229, 3230, 3231, 3232, 3233, 3234, 3235, 3236, 3238, 3239, 3240, 3241, 3242, 3243, 3244, 3245, 3246, 3247, 3248, 3249, 3250, 3251, 3252, 3253, 3254, 3255, 3256, 3257, 3258, 3259, 3260, 3261, 3262, 3263, 3264, 3265, 3266, 3267, 3268, 3269, 3270, 3271, 3272, 3273, 3274, 3275, 3276, 3277, 3278, 3279, 3280, 3281, 3282, 3283, 3284, 3285, 3286, 3287, 3288, 3289, 3290, 3291, 3292, 3293, 3294, 3295, 3296, 3297, 3298, 3299, 3300, 3301, 3302, 3303, 3304, 3305, 3306, 3307, 3308, 3309, 3310, 3311, 3312, 3313, 3314, 3315, 3316, 3317, 3318, 3319, 3320, 3321, 3322, 3323, 3324, 3325, 3326, 3327, 3328, 3329, 3330, 3331, 3332, 3333, 3334, 3335, 3336, 3337, 3338, 3339, 3340, 3341, 3342, 3343, 3344, 3345, 3346, 3347, 3348, 3349, 3350, 3351, 3352, 3353, 3354, 3355, 3356, 3357, 3358, 3359, 3361, 3362, 3363, 3364, 3365, 3366, 3367, 3368, 3369, 3370, 3371, 3372, 3373, 3374, 3375],
                    // 思岚
                    15159926: [107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 124, 125, 126, 127, 129, 131, 132, 133, 134, 135, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 157, 159, 160, 161, 163, 164, 165, 166, 167, 168, 169, 172, 173, 181, 182, 183, 184, 186, 187, 188, 189, 190, 191, 192, 193, 194, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 211, 212, 214, 218, 219, 220, 221, 222, 223, 227, 229, 230, 231, 232, 234, 236, 238, 239, 240, 241, 242, 243, 246, 247, 249, 250, 251, 252, 253, 254, 255, 256, 257, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 275, 276, 277, 278, 279, 280, 282, 283, 284, 285, 286, 287, 293, 294, 295, 296, 297, 307, 308, 310, 311, 312, 314, 315, 316, 317, 318, 320, 321, 322, 323, 324, 325, 327, 328, 329, 330, 331, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 347, 348, 349, 351, 352, 353, 356, 358, 359, 361, 362, 363, 365, 366, 368, 371, 373, 376, 378, 382, 383, 386, 388, 390, 395, 397, 400, 401, 402, 403, 404, 406, 407, 409, 411, 415, 416, 419, 420, 422, 426, 430, 434, 436, 439, 441, 442, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 462, 463, 465, 466, 467, 471, 472, 475, 476, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 501, 503, 506, 507, 510, 511, 512, 513, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 560],
                    // 小麦
                    9924623: [105, 109, 110, 111, 112, 113, 114, 115, 116, 117, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 153, 154, 155, 156, 160, 161, 162, 163, 166, 167, 168, 171],
                    // 雨曦
                    10911216: [102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 162, 163, 164, 165, 166, 171, 172, 173, 174, 175, 176, 177, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 240, 241, 242, 243, 244, 246, 247, 248, 249, 251, 252, 255, 257, 258, 259, 260, 261, 262, 263, 264, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 323, 324, 325, 326, 331, 333, 334, 335, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 356, 357, 358, 359, 360, 361, 362, 364, 367, 370, 371, 373, 374, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 439],
                    // 阿树
                    15977564: [101, 102, 127, 128, 129, 130, 131, 132, 134, 135, 171, 172, 173, 181, 182, 183, 184, 185, 186, 187, 188, 191, 192, 193, 195, 196, 201, 202, 204, 205, 206, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 236, 237, 238, 239, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255],
                    // 鹏宇
                    17269552: [109, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 126, 128, 130, 131, 132, 136, 137, 138, 140, 141, 143, 144, 145, 146, 156, 158, 159, 160, 162, 163, 166, 167, 168, 169, 170, 172, 177, 178, 179, 180, 181, 182, 186, 187, 189, 190, 191, 192, 196, 197, 198, 199, 200, 201, 203, 204, 205, 206, 207, 209, 210, 211, 212, 213, 219, 220, 221, 222, 223, 224, 231, 233, 234, 235, 236, 238, 246, 247, 249, 251, 252, 257, 269, 270, 271, 272, 278, 279, 280, 281, 283, 284, 289, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 314, 315, 318, 319, 320, 321, 322, 323, 329, 330, 331, 332, 333, 334, 336, 337, 338, 340, 347, 348, 350, 353, 354, 357, 358, 360, 361, 362, 363, 364, 365, 366, 370, 371, 372, 373, 374, 380, 381, 390, 399, 408, 409, 416, 418, 421, 422, 423, 428, 429, 430, 432, 433, 434, 435, 436, 437, 439, 440, 441, 443, 448, 463, 465, 471, 473, 480, 483, 485, 486, 489, 490, 491, 492, 495, 497, 502, 520, 521, 522, 527, 536, 538, 539, 542, 543, 552, 556, 558, 559, 560, 562, 564, 566, 567, 570, 571, 572, 573, 574, 575, 576, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 594, 595, 597, 598, 599, 600, 602, 603, 608, 609, 610, 611, 612, 614, 615, 618, 619, 620, 621, 622, 623, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 642, 644, 645, 646, 648, 649, 650, 651, 653],
                    // 林蓓
                    13591245: [115, 122, 124, 125, 126, 127, 128, 129, 131, 145, 167, 170, 171, 172, 173, 174, 177, 178, 179, 183, 184, 185, 188, 190, 191, 193, 194, 196, 197, 200, 202, 203, 204, 210, 211, 212, 214, 215, 216, 222, 223, 224, 225, 226, 227, 229, 230, 231, 232, 233, 234, 242, 245, 246, 247, 248, 249, 259, 260, 261, 262, 263, 272, 273, 277, 278, 284, 285, 289, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 306, 307, 308, 309, 311, 313, 315, 316, 317, 318, 319, 320, 321, 322, 323, 325, 333, 336, 348, 352, 353, 354, 355, 357, 358, 359, 360, 361, 364, 371, 377, 379, 380, 381, 382, 383, 387, 388, 389, 390, 391, 392, 393, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416],
                    // 俊华
                    18265573: [144],
                    // 天佑
                    4073964: [101, 103, 104, 105, 144, 158, 159, 160, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 191, 192, 193],
                    // 家郁
                    18024076: [104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 118, 119, 120, 121, 122, 125, 126, 127, 129, 130, 131, 133, 134, 135, 136, 137, 138, 139, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 236, 237, 238, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 407, 408, 409, 410, 411, 412, 413, 414, 415, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 449, 450, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 486, 490, 491, 492, 493, 494, 495, 496, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681],
                    // 青韵
                    18024111: [102, 103, 104, 105, 107, 109, 110, 111, 113, 114, 115, 116, 117, 118, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 136, 138, 141, 142, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 172, 174, 175, 176, 177, 179, 180, 183, 184, 186, 187, 188, 189, 190, 192, 193, 194, 195, 197, 199, 200, 201, 203, 204, 205, 206, 208, 209, 211, 212, 213, 214, 215, 216, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 251, 252, 253, 255, 256, 257, 258, 260, 261, 262, 264, 265, 266, 267, 268, 269, 270, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 305, 306, 307, 308, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 453, 454, 455, 456, 457, 458, 459, 460, 461, 463, 464, 466, 467, 468, 471, 472, 473, 474, 477, 479, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 496, 497, 498, 499, 500, 501, 502, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 517, 518, 519, 520, 521, 522, 523, 524, 525, 528, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 548, 549, 550, 552, 553, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 576, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 685, 686, 687, 688, 689, 691, 692, 693, 694, 695, 696, 698, 699, 700, 701, 702, 703, 704, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 746, 747, 748, 749, 750, 751, 752],
                    16598741: [101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 195, 196, 197, 198, 199, 200, 201, 205, 206, 207, 208, 209, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 222, 225, 227, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 263, 264, 268, 270, 272, 273, 274, 276, 277, 278, 279, 280, 281, 282, 283, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296],
                    17175708: [158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 201, 202, 203, 204, 205, 206, 207, 208, 209, 219, 220, 221, 222, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 354, 355, 356, 357, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 455, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 542],
                };
                const currentAid = location.search.match(/_aid=([0-9]+)/)[1];
                const currentId = Number(location.search.match(/id=([0-9]+)/)[1]);
                let idList = idObj[currentAid];
                if (idList) {
                    idList = Array.from(new Set(idList));
                    const nextId = idList[idList.indexOf(currentId) + 1];
                    if (nextId) {
                        location.href = location.href.replace(/id=[0-9]{3,}/, `id=${nextId}`);
                    }
                }
            } catch (err) {
                console.log(err);
                location.reload();
            }
        } */
    },
    getPaths(ev) {
        let { target } = ev;
        const pathsArr = [];
        while (target.tagName !== 'BODY') {
            pathsArr.push(target);
            target = target.parentNode;
        }
        return pathsArr;
    },
    /**
     * 将svg格式的url转换为png base64格式的url
     * @param svgSrc
     * @returns {Promise<*>}
     *
     * 使用方法：
     * const pngBase64 = await Ktu.utils.drawImageInFF(svgSrc);
     */
    async svgToPngBase64(svgSrc) {
        const canvas = document.createElement('canvas');
        const newCanvas = await new Promise((res, rej) => {
            const img = new Image();
            img.onload = () => {
                img.id = 'tempImgFF';
                document.body.append(img);
                const w = document.getElementById('tempImgFF').offsetWidth;
                const h = document.getElementById('tempImgFF').offsetHeight;
                document.body.removeChild(img);
                let tmpW; let tmpH;
                if (w > h) {
                    tmpW = 300;
                    tmpH = 300 * h / w;
                } else {
                    tmpH = 300;
                    tmpW = 300 * w / h;
                }
                const dx = 0; const dy = 0; const width = tmpW; const height = tmpH;
                const object = document.createElement('object');
                object.setAttribute('type', 'image/svg+xml');
                object.setAttribute('data', svgSrc);
                object.setAttribute('class', 'svgClass');
                object.style.display = 'none';
                document.body.append(object);
                object.onload = () => {
                    const svg = document.querySelector('.svgClass').getSVGDocument()
                        .getElementsByTagName('svg')[0];
                    svg.setAttribute('width', `${width}px`);
                    svg.setAttribute('height', `${height}px`);
                    const DOMURL = window.URL || window.webkitURL || window;
                    const svgBlob = new Blob([svg.outerHTML], {
                        type: 'image/svg+xml',
                    });
                    document.body.removeChild(object);
                    const base64 = DOMURL.createObjectURL(svgBlob);
                    const img = new Image();
                    img.src = base64;
                    img.onload = info => {
                        const ctx = canvas.getContext('2d');
                        canvas.width = width;
                        canvas.height = height;
                        ctx.drawImage(img, dx, dy, width, width);
                        res(canvas);
                    };
                    img.onerror = info => {
                        rej(info);
                    };
                };
            };
            img.src = svgSrc;
        });
        return newCanvas.toDataURL('image/png');
    },

    /**
     * 兼容的drawImage方法，解决firefox下src为.svg格式的图片无法绘制到canvas上
     * @param params：
     * canvas 原始的canvas
     * svgSrc: svg格式的src
     * dx: 该参数与dragImage方法一致
     * dy: 该参数与dragImage方法一致
     * width: 该参数与dragImage方法一致
     * height: 该参数与dragImage方法一致
     * 使用方法：
     *  const newCanvas = await drawSvgImage({
     *      canvas: canvas,
     *      svgSrc: 'svg.svg',
     *      dx: 150,
     *      dy: 150,
     *      width: 150,
     *      height: 150
     *  })
     * @returns {Promise<*>}
     */
    async drawSvgImage(params) {
        const UserAgent = navigator.userAgent.toLowerCase();
        const isFirefox = /firefox/.test(UserAgent);
        if (isFirefox) {
            const { svgSrc, canvas } = params;
            const newCanvas = await new Promise((res, rej) => {
                const img = new Image();
                img.onload = () => {
                    img.id = 'tempImgFF';
                    document.body.append(img);
                    img.style.position = 'fixed';
                    img.style.left = '-100000px';
                    const w = document.getElementById('tempImgFF').offsetWidth;
                    const h = document.getElementById('tempImgFF').offsetHeight;
                    document.body.removeChild(img);
                    let tmpW; let tmpH;
                    if (w > h) {
                        tmpW = 150;
                        tmpH = 150 * h / w;
                    } else {
                        tmpH = 150;
                        tmpW = 150 * w / h;
                    }
                    const { dx = 0, dy = 0, width = canvas.width } = params;
                    const object = document.createElement('object');
                    object.setAttribute('type', 'image/svg+xml');
                    object.setAttribute('data', svgSrc);
                    object.setAttribute('class', 'svgClass');
                    object.style.display = 'none';
                    document.body.append(object);
                    object.onload = () => {
                        const svg = document.querySelector('.svgClass').getSVGDocument()
                            .getElementsByTagName('svg')[0];
                        svg.setAttribute('width', tmpW);
                        svg.setAttribute('height', tmpH);
                        const DOMURL = window.URL || window.webkitURL || window;
                        const svgBlob = new Blob([svg.outerHTML], {
                            type: 'image/svg+xml',
                        });
                        document.body.removeChild(object);
                        const base64 = DOMURL.createObjectURL(svgBlob);
                        const img = new Image();
                        img.setAttribute('crossOrigin', 'Anonymous');
                        img.src = base64;
                        img.onload = info => {
                            const ctx = canvas.getContext('2d');
                            ctx.drawImage(img, dx, dy, width, width);
                            res(canvas);
                        };
                        img.onerror = info => {
                            rej(info);
                        };
                    };
                };
                img.src = svgSrc;
            });
            return newCanvas;
        }
        const { canvas, dx = 0, dy = 0, width = canvas.width, height = canvas.height, svgSrc } = params;
        const img = new Image();
        const newCanvas = await new Promise((res, rej) => {
            img.onload = () => {
                const ctx = canvas.getContext('2d');
                ctx.drawImage(img, dx, dy, width, height);
                res(canvas);
            };
            img.src = svgSrc;
        });
        return newCanvas;
    },
};

Ktu.itemFactory = (function () {
    function generateRandomItems(count) {
        const items = [];
        let i;
        for (i = 0; i < count; i++) {
            items[i] = {
                style: {
                    background: getRandomColor(),
                },
                width: 100 + ~~(Math.random() * 50),
                height: 100 + ~~(Math.random() * 50),
            };
        }
        return items;
    }

    function getRandomColor() {
        const colors = [
            'rgb(21,174,103)',
            'rgb(245,163,59)',
            'rgb(255,230,135)',
            'rgb(194,217,78)',
            'rgb(195,123,177)',
            'rgb(125,205,244)',
        ];
        return colors[~~(Math.random() * colors.length)];
    }

    return {
        get: generateRandomItems,
    };
}());

// 兼容性es6  暂时放在这里
/* if (typeof Object.assign != 'function') {
    // Must be writable: true, enumerable: false, configurable: true
    Object.defineProperty(Object, 'assign', {
        // .length of function is 2
        value: function assign(target, varArgs) {
            'use strict';
            // TypeError if undefined or null
            if (target == null) {
                throw new TypeError('Cannot convert undefined or null to object');
            }

            const to = Object(target);

            for (let index = 1; index < arguments.length; index++) {
                const nextSource = arguments[index];
                // Skip over if undefined or null
                if (nextSource != null) {
                    for (const nextKey in nextSource) {
                        // Avoid bugs when hasOwnProperty is shadowed
                        if (Object.prototype.hasOwnProperty.call(nextSource, nextKey)) {
                            to[nextKey] = nextSource[nextKey];
                        }
                    }
                }
            }
            return to;
        },
        writable: true,
        configurable: true,
    });
}; */
(function () {
    const arcToSegmentsCache = {};
    const segmentToBezierCache = {};
    const boundsOfCurveCache = {};
    const _join = Array.prototype.join;

    /* Adapted from http://dxr.mozilla.org/mozilla-central/source/content/svg/content/src/nsSVGPathDataParser.cpp
     * by Andrea Bogazzi code is under MPL. if you don't have a copy of the license you can take it here
     * http://mozilla.org/MPL/2.0/
     */
    function arcToSegments(toX, toY, rx, ry, large, sweep, rotateX, ...args) {
        // const argsString = _join.call(arguments);
        const argsString = _join.call([toX, toY, rx, ry, large, sweep, rotateX, ...args]);
        if (arcToSegmentsCache[argsString]) {
            return arcToSegmentsCache[argsString];
        }

        const {
            PI,
        } = Math;
        const th = rotateX * PI / 180;
        const sinTh = Math.sin(th);
        const cosTh = Math.cos(th);
        let fromX = 0;
        let fromY = 0;

        rx = Math.abs(rx);
        ry = Math.abs(ry);

        const px = -cosTh * toX * 0.5 - sinTh * toY * 0.5;
        const py = -cosTh * toY * 0.5 + sinTh * toX * 0.5;
        const rx2 = rx * rx;
        const ry2 = ry * ry;
        const py2 = py * py;
        const px2 = px * px;
        const pl = rx2 * ry2 - rx2 * py2 - ry2 * px2;
        let root = 0;

        if (pl < 0) {
            const s = Math.sqrt(1 - pl / (rx2 * ry2));
            rx *= s;
            ry *= s;
        } else {
            root = (large === sweep ? -1.0 : 1.0)
                * Math.sqrt(pl / (rx2 * py2 + ry2 * px2));
        }

        const cx = root * rx * py / ry;
        const cy = -root * ry * px / rx;
        const cx1 = cosTh * cx - sinTh * cy + toX * 0.5;
        const cy1 = sinTh * cx + cosTh * cy + toY * 0.5;
        let mTheta = calcVectorAngle(1, 0, (px - cx) / rx, (py - cy) / ry);
        let dtheta = calcVectorAngle((px - cx) / rx, (py - cy) / ry, (-px - cx) / rx, (-py - cy) / ry);

        if (sweep === 0 && dtheta > 0) {
            dtheta -= 2 * PI;
        } else if (sweep === 1 && dtheta < 0) {
            dtheta += 2 * PI;
        }

        // Convert into cubic bezier segments <= 90deg
        const segments = Math.ceil(Math.abs(dtheta / PI * 2));
        const result = [];
        const mDelta = dtheta / segments;
        const mT = 8 / 3 * Math.sin(mDelta / 4) * Math.sin(mDelta / 4) / Math.sin(mDelta / 2);
        let th3 = mTheta + mDelta;

        for (let i = 0; i < segments; i++) {
            result[i] = segmentToBezier(mTheta, th3, cosTh, sinTh, rx, ry, cx1, cy1, mT, fromX, fromY);
            fromX = result[i][4];
            fromY = result[i][5];
            mTheta = th3;
            th3 += mDelta;
        }
        arcToSegmentsCache[argsString] = result;
        return result;
    }

    function segmentToBezier(th2, th3, cosTh, sinTh, rx, ry, cx1, cy1, mT, fromX, fromY, ...args) {
        // const argsString2 = _join.call(arguments);
        const argsString2 = _join.call([th2, th3, cosTh, sinTh, rx, ry, cx1, cy1, mT, fromX, fromY, ...args]);
        if (segmentToBezierCache[argsString2]) {
            return segmentToBezierCache[argsString2];
        }

        const costh2 = Math.cos(th2);
        const sinth2 = Math.sin(th2);
        const costh3 = Math.cos(th3);
        const sinth3 = Math.sin(th3);
        const toX = cosTh * rx * costh3 - sinTh * ry * sinth3 + cx1;
        const toY = sinTh * rx * costh3 + cosTh * ry * sinth3 + cy1;
        const cp1X = fromX + mT * (-cosTh * rx * sinth2 - sinTh * ry * costh2);
        const cp1Y = fromY + mT * (-sinTh * rx * sinth2 + cosTh * ry * costh2);
        const cp2X = toX + mT * (cosTh * rx * sinth3 + sinTh * ry * costh3);
        const cp2Y = toY + mT * (sinTh * rx * sinth3 - cosTh * ry * costh3);

        segmentToBezierCache[argsString2] = [
            cp1X, cp1Y,
            cp2X, cp2Y,
            toX, toY,
        ];
        return segmentToBezierCache[argsString2];
    }

    /* Private */
    function calcVectorAngle(ux, uy, vx, vy) {
        const ta = Math.atan2(uy, ux);
        const tb = Math.atan2(vy, vx);
        if (tb >= ta) {
            return tb - ta;
        }

        return 2 * Math.PI - (ta - tb);
    }

    /**
     * Draws arc
     * @param {CanvasRenderingContext2D} ctx
     * @param {Number} fx
     * @param {Number} fy
     * @param {Array} coords
     */
    Ktu.utils.drawArc = function (ctx, fx, fy, coords) {
        const rx = coords[0];
        const ry = coords[1];
        const rot = coords[2];
        const large = coords[3];
        const sweep = coords[4];
        const tx = coords[5];
        const ty = coords[6];
        const segs = [
            [],
            [],
            [],
            [],
        ];
        const segsNorm = arcToSegments(tx - fx, ty - fy, rx, ry, large, sweep, rot);

        for (let i = 0, len = segsNorm.length; i < len; i++) {
            segs[i][0] = segsNorm[i][0] + fx;
            segs[i][1] = segsNorm[i][1] + fy;
            segs[i][2] = segsNorm[i][2] + fx;
            segs[i][3] = segsNorm[i][3] + fy;
            segs[i][4] = segsNorm[i][4] + fx;
            segs[i][5] = segsNorm[i][5] + fy;
            // ctx.bezierCurveTo.apply(ctx, segs[i]);
            ctx.bezierCurveTo(...segs[i]);
        }
    };

    /**
     * Calculate bounding box of a elliptic-arc
     * @param {Number} fx start point of arc
     * @param {Number} fy
     * @param {Number} rx horizontal radius
     * @param {Number} ry vertical radius
     * @param {Number} rot angle of horizontal axe
     * @param {Number} large 1 or 0, whatever the arc is the big or the small on the 2 points
     * @param {Number} sweep 1 or 0, 1 clockwise or counterclockwise direction
     * @param {Number} tx end point of arc
     * @param {Number} ty
     */
    Ktu.utils.getBoundsOfArc = function (fx, fy, rx, ry, rot, large, sweep, tx, ty) {
        let fromX = 0;
        let fromY = 0;
        let bound;
        const bounds = [];
        const segs = arcToSegments(tx - fx, ty - fy, rx, ry, large, sweep, rot);

        for (let i = 0, len = segs.length; i < len; i++) {
            bound = getBoundsOfCurve(fromX, fromY, segs[i][0], segs[i][1], segs[i][2], segs[i][3], segs[i][4], segs[i][5]);
            bounds.push({
                x: bound[0].x + fx,
                y: bound[0].y + fy,
            });
            bounds.push({
                x: bound[1].x + fx,
                y: bound[1].y + fy,
            });
            fromX = segs[i][4];
            fromY = segs[i][5];
        }
        return bounds;
    };

    /**
     * Calculate bounding box of a beziercurve
     * @param {Number} x0 starting point
     * @param {Number} y0
     * @param {Number} x1 first control point
     * @param {Number} y1
     * @param {Number} x2 secondo control point
     * @param {Number} y2
     * @param {Number} x3 end of beizer
     * @param {Number} y3
     */
    // taken from http://jsbin.com/ivomiq/56/edit  no credits available for that.
    function getBoundsOfCurve(x0, y0, x1, y1, x2, y2, x3, y3, ...args) {
        // const argsString = _join.call(arguments);
        const argsString = _join.call([x0, y0, x1, y1, x2, y2, x3, y3, ...args]);
        if (boundsOfCurveCache[argsString]) {
            return boundsOfCurveCache[argsString];
        }

        const {
            sqrt,
        } = Math;
        const {
            min,
        } = Math;
        const {
            max,
        } = Math;
        const {
            abs,
        } = Math;
        const tvalues = [];
        const bounds = [
            [],
            [],
        ];
        let a;
        let b;
        let c;
        let t;
        let t1;
        let t2;
        let b2ac;
        let sqrtb2ac;

        b = 6 * x0 - 12 * x1 + 6 * x2;
        a = -3 * x0 + 9 * x1 - 9 * x2 + 3 * x3;
        c = 3 * x1 - 3 * x0;

        for (let i = 0; i < 2; ++i) {
            if (i > 0) {
                b = 6 * y0 - 12 * y1 + 6 * y2;
                a = -3 * y0 + 9 * y1 - 9 * y2 + 3 * y3;
                c = 3 * y1 - 3 * y0;
            }

            if (abs(a) < 1e-12) {
                if (abs(b) < 1e-12) {
                    continue;
                }
                t = -c / b;
                if (0 < t && t < 1) {
                    tvalues.push(t);
                }
                continue;
            }
            b2ac = b * b - 4 * c * a;
            if (b2ac < 0) {
                continue;
            }
            sqrtb2ac = sqrt(b2ac);
            t1 = (-b + sqrtb2ac) / (2 * a);
            if (0 < t1 && t1 < 1) {
                tvalues.push(t1);
            }
            t2 = (-b - sqrtb2ac) / (2 * a);
            if (0 < t2 && t2 < 1) {
                tvalues.push(t2);
            }
        }

        let x;
        let y;
        let j = tvalues.length;
        const jlen = j;
        let mt;
        while (j--) {
            t = tvalues[j];
            mt = 1 - t;
            x = (mt * mt * mt * x0) + (3 * mt * mt * t * x1) + (3 * mt * t * t * x2) + (t * t * t * x3);
            bounds[0][j] = x;

            y = (mt * mt * mt * y0) + (3 * mt * mt * t * y1) + (3 * mt * t * t * y2) + (t * t * t * y3);
            bounds[1][j] = y;
        }

        bounds[0][jlen] = x0;
        bounds[1][jlen] = y0;
        bounds[0][jlen + 1] = x3;
        bounds[1][jlen + 1] = y3;
        const result = [{
            x: min(...bounds[0]),
            y: min(...bounds[1]),
        },
        {
            x: max(...bounds[0]),
            y: max(...bounds[1]),
        },
        ];
        boundsOfCurveCache[argsString] = result;
        return result;
    }

    Ktu.utils.getBoundsOfCurve = getBoundsOfCurve;

    Ktu.utils.checkCanUseWebGL = () => {
        try {
            const canvas = document.createElement('canvas');
            return !! (window.WebGLRenderingContext && (canvas.getContext('webgl') || canvas.getContext('experimental-webgl')));
        } catch (err) {
            console.warn(`no support webgl browser: ${err}`);
            return false;
        }
    };

    Ktu.isSupportWebGL = Ktu.utils.checkCanUseWebGL();

    Ktu.utils.copyText = (text, callback) => {
        const input = document.createElement('input');
        input.value = text;
        document.body.appendChild(input);
        window.getSelection().removeAllRanges();
        input.select();
        const successFul = document.execCommand('copy');
        if (successFul) {
            callback({ success: true });
        } else {
            callback({ success: false });
        }
        window.getSelection().removeAllRanges();
        document.body.removeChild(input);
    };
    // Ktu.isSupportWebGL = false;
}());
